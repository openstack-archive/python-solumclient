#!/usr/bin/env python
# Copyright 2014 - Rackspace Hosting
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

import argparse
import base64
import getpass
import httplib2
import json
import os
import random
import re
import string
import subprocess
import tempfile
import yaml


CREDENTIALS = {}


def _get_token(user_org_name, repo):
    # Get an OAuth token with the scope of 'repo:status' for the user
    full_repo_name = '/'.join([user_org_name, repo])
    if full_repo_name in CREDENTIALS and 'token' in CREDENTIALS[full_repo_name]:
        return CREDENTIALS[full_repo_name]['token']
    username = raw_input("Username for repo '%s' [%s]: " % (full_repo_name,
                                                            user_org_name))
    if not username:
        username = user_org_name
    password = getpass.getpass("Password: ")
    CREDENTIALS[full_repo_name] = {}
    CREDENTIALS[full_repo_name]['user'] = username
    CREDENTIALS[full_repo_name]['password'] = password

    http = httplib2.Http()
    auth = base64.encodestring(username + ':' + password)
    headers = {'Authorization': 'Basic ' + auth,
               'Content-Type': 'application/json'}
    # 'note' field has to be unique
    note = 'Arbor-status-' + ''.join(random.sample(string.lowercase, 5))
    data = {'scopes': 'repo:status', 'note': note}

    resp, content = http.request('https://api.github.com/authorizations',
                                 'POST', headers=headers,
                                 body=json.dumps(data))

    if resp['status'] == '201' or resp['status'] == '200':
        content_dict = json.loads(content)
        CREDENTIALS[full_repo_name]['token'] = str(content_dict['token'])
        return CREDENTIALS[full_repo_name]['token']
    else:
        print 'Failed to get token from Github'
        exit(1)


def get_planfile(plan_templ):
    # Create a Github token and insert it into plan file
    repo_pattern = re.compile(r'github\.com/(.+?)/(.+?)($|/$|\.git$|\.git/$)')
    with open(plan_templ, 'r') as f:
        plan_dict = yaml.load(f)
        for arti in plan_dict['artifacts']:
            repo_uri = arti['content']['href']
            match = repo_pattern.search(repo_uri)
            if match:
                arti['status_token'] = _get_token(match.group(1), match.group(2))
            else:
                print 'Failed parsing %s' % repo_uri
                exit(1)
        plan_file = tempfile.NamedTemporaryFile(suffix='.yaml',
                                                    prefix='arbor_',
                                                    delete=False)
        plan_file.write(yaml.dump(plan_dict, default_flow_style=False))
        plan_file_name = plan_file.name
        plan_file.close()
    return plan_file_name


def create_plan(plan_file):
    cmd = ['solum', 'app', 'create', plan_file]
    print ' '.join(cmd)
    out = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    print out

    plan_uri = None
    for line in out.split('\n'):
        if 'uri' in line:
            plan_uri = line.split()[3]

    if plan_uri is None:
        print 'Error: no uri found in plan creation'
        exit(1)

    return plan_uri


def create_assembly(app_name, plan_uri):
    cmd = ['solum', 'assembly', 'create', app_name, plan_uri]
    print ' '.join(cmd)
    out = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    print out

    trigger_uri = None
    trigger_uri_p2 = None
    for line in out.split('\n'):
        if 'trigger_uri' in line:
            trigger_uri = line.split()[3]
        if len(line.split()) == 4:
            trigger_uri_p2 = line.split()[2]

    if trigger_uri is None:
        print 'Error in trigger uri'
        exit(1)

    if trigger_uri_p2:
        trigger_uri = ''.join([trigger_uri, trigger_uri_p2])
    return trigger_uri


def create_webhook(trigger_uri):
    # Create github web hooks for pull requests
    for repo in CREDENTIALS.keys():
        user = CREDENTIALS[repo]['user']
        password = CREDENTIALS[repo]['password']
        auth = base64.encodestring(user + ':' + password)
        http = httplib2.Http()
        github_url = 'https://api.github.com/repos/%s/hooks' % repo
        headers = {'Authorization': 'Basic ' + auth,
                   'Content-Type': 'application/json'}
        #TODO(james): change the IP in trigger_url to be a public host name
        data = {'name': 'web',
                'events': ['pull_request', 'push'],
                'config': {'content_type': 'json',
                           'url': trigger_uri}}

        resp, _ = http.request(github_url, 'POST',
                                     headers=headers,
                                     body=json.dumps(data))

        if resp['status'] != '201' and resp['status'] != '200':
            print "Failed to create web hooks"
            print "Make sure you have access to repo '%s'" % repo
            exit(1)


def main(app, plan_templ):
    plan_file = get_planfile(plan_templ)
    print '\n'
    print "************************* Starting setup *************************"
    print '\n'
    plan_uri = create_plan(plan_file)
    try:
        os.remove(plan_file)
    except OSError:
        print 'Cannot remove %s. Skip and move forward...' % plan_file

    trigger_uri = create_assembly(app, plan_uri)
    create_webhook(trigger_uri)
    print 'Successfully created Arbor plan, assembly and webhooks!'


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("app_name", help="app name")
    parser.add_argument("plan_file", help="app plan file")
    args = parser.parse_args()
    main(args.app_name, args.plan_file)
